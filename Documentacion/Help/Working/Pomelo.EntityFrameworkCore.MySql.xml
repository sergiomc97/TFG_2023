<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pomelo.EntityFrameworkCore.MySql</name>
    </assembly>
    <members>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute">
            <summary>
                Sets the character set of a type (table), property or field (column) for MySQL.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute" /> class.
                Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/>.
            </summary>
            <param name="charSet"> The name of the character set to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute.#ctor(System.String,Microsoft.EntityFrameworkCore.DelegationModes)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute" /> class.
            </summary>
            <param name="charSet"> The name of the character set to use. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not.
            Ignored when <see cref="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute"/> is applied to properties/columns.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute.CharSetName">
            <summary>
                The name of the character set to use.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute.DelegationModes">
            <summary>
            Finely controls where to recursively apply the character set and where not.
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            Ignored when <see cref="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute"/> is applied to properties/columns.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute">
            <summary>
                Sets the collation of a type (table), property or field (column) for MySQL.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlCollationAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute" /> class.
                Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/>.
            </summary>
            <param name="collation"> The name of the collation to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlCollationAttribute.#ctor(System.String,Microsoft.EntityFrameworkCore.DelegationModes)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute" /> class.
            </summary>
            <param name="collation"> The name of the collation to use. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the collation and where not.
            Ignored when <see cref="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute"/> is applied to properties/columns.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.MySqlCollationAttribute.CollationName">
            <summary>
                The name of the collation to use.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.MySqlCollationAttribute.DelegationModes">
            <summary>
            Finely controls where to recursively apply the collation and where not.
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            Ignored when <see cref="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute"/> is applied to properties/columns.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId">
            <summary>
                <para>
                    Event IDs for MySql events that correspond to messages logged to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                    and events sent to a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
                <para>
                    These IDs are also used with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> to configure the
                    behavior of warnings.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.DecimalTypeDefaultWarning">
            <summary>
                <para>
                    No explicit type for a decimal column.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ByteIdentityColumnWarning">
            <summary>
                <para>
                    A byte property is set up to use a MySql identity column.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ColumnFound">
            <summary>
                A column was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnFound">
            <summary>
                A column of a foreign key was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.DefaultSchemaFound">
            <summary>
                A default schema was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.TypeAliasFound">
            <summary>
                A type alias was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.MissingSchemaWarning">
            <summary>
                The database is missing a schema.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.MissingTableWarning">
            <summary>
                The database is missing a table.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.SequenceNotNamedWarning">
            <summary>
                The database has an unnamed sequence.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnsNotMappedWarning">
            <summary>
                Columns in an index were not mapped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyReferencesMissingPrincipalTableWarning">
            <summary>
                A foreign key references a missing table at the principal end.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnsNotMappedWarning">
            <summary>
                Columns in a foreign key were not mapped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyNotNamedWarning">
            <summary>
                A foreign key is not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnMissingWarning">
            <summary>
                A foreign key column was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyColumnNotNamedWarning">
            <summary>
                A foreign key column was not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ColumnNotNamedWarning">
            <summary>
                A column is not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexNotNamedWarning">
            <summary>
                An index is not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexTableMissingWarning">
            <summary>
                The table referenced by an index was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnNotNamedWarning">
            <summary>
                An index column was not named.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.TableFound">
            <summary>
                A table was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.TableSkipped">
            <summary>
                A table was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ColumnSkipped">
            <summary>
                A column was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnFound">
            <summary>
                An index was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexColumnSkipped">
            <summary>
                A column of an index was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.SequenceFound">
            <summary>
                A sequence was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyTableMissingWarning">
            <summary>
                A foreign key table was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.PrimaryKeyFound">
            <summary>
                Primary key was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.UniqueConstraintFound">
            <summary>
                An unique constraint was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.IndexFound">
            <summary>
                An index was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyFound">
            <summary>
                A foreign key was found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ForeignKeyPrincipalColumnMissingWarning">
            <summary>
                A principal column referenced by a foreign key was not found.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.ReflexiveConstraintIgnored">
            <summary>
                A reflexive foreign key constraint was skipped.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.MySqlEventId.DefaultValueNotSupportedWarning">
            <summary>
                A default value expression was used in conjunction wiht a column type and database server version that is not supported.
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlDatabaseFacadeExtensions">
            <summary>
                MySQL specific extension methods for <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDatabaseFacadeExtensions.IsMySql(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                <para>
                    Returns true if the database provider currently in use is the MySQL provider.
                </para>
                <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
            </summary>
            <param name="database"> The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />. </param>
            <returns> True if MySQL is being used; false otherwise. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder"/> and <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1"/>
            to configure a <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> to use with MySQL/MariaDB and Pomelo.EntityFrameworkCore.MySql.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions.UseMySql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder})">
            <summary>
                <para>
                    Configures the context to connect to a MySQL compatible database, but without initially setting any
                    <see cref="T:System.Data.Common.DbConnection" /> or connection string.
                </para>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
            </summary>
            <param name="optionsBuilder"> The builder being used to configure the context. </param>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <returns> The options builder so that further configuration can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions.UseMySql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a MySQL compatible database.
            </summary>
            <param name="optionsBuilder"> The builder being used to configure the context. </param>
            <param name="connectionString"> The connection string of the database to connect to. </param>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <returns> The options builder so that further configuration can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions.UseMySql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a MySQL compatible database.
            </summary>
            <param name="optionsBuilder"> The builder being used to configure the context. </param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <returns> The options builder so that further configuration can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions.UseMySql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder})">
            <summary>
                <para>
                    Configures the context to connect to a MySQL compatible database, but without initially setting any
                    <see cref="T:System.Data.Common.DbConnection" /> or connection string.
                </para>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
            </summary>
            <typeparam name="TContext"> The type of context to be configured. </typeparam>
            <param name="optionsBuilder"> The builder being used to configure the context. </param>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <returns> The options builder so that further configuration can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions.UseMySql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a MySQL compatible database.
            </summary>
            <typeparam name="TContext"> The type of context to be configured. </typeparam>
            <param name="optionsBuilder"> The builder being used to configure the context. </param>
            <param name="connectionString"> The connection string of the database to connect to. </param>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <returns> The options builder so that further configuration can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbContextOptionsBuilderExtensions.UseMySql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a MySQL compatible database.
            </summary>
            <param name="optionsBuilder"> The builder being used to configure the context. </param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <typeparam name="TContext"> The type of context to be configured. </typeparam>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <returns> The options builder so that further configuration can be chained. </returns>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlMatchSearchMode.NaturalLanguage">
            <summary>
            Perform a natural language search for a string against a text collection.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlMatchSearchMode.NaturalLanguageWithQueryExpansion">
            <summary>
            Perform a natural language search with query expansion for a string against a text collection.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlMatchSearchMode.Boolean">
            <summary>
            Perform a boolean search for a string against a text collection.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                The methods on this class are accessed via <see cref="P:Microsoft.EntityFrameworkCore.EF.Functions" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of year boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(YEAR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of month boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MONTH,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of day boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(DAY,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of hour boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(HOUR,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of minute boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MINUTE,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of second boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(SECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of microsecond boundaries crossed between the startDate and endDate.
                Corresponds to TIMESTAMPDIFF(MICROSECOND,startDate,endDate).
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Like``1(Microsoft.EntityFrameworkCore.DbFunctions,``0,System.String)">
            <summary>
                <para>
                    An implementation of the SQL LIKE operation. On relational databases this is usually directly
                    translated to SQL.
                </para>
                <para>
                    Note that if this function is translated into SQL, then the semantics of the comparison will
                    depend on the database configuration. In particular, it may be either case-sensitive or
                    case-insensitive. If this function is evaluated on the client, then it will always use
                    a case-insensitive comparison.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The property of entity that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
            <returns>true if there is a match.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Like``1(Microsoft.EntityFrameworkCore.DbFunctions,``0,System.String,System.String)">
            <summary>
                <para>
                    An implementation of the SQL LIKE operation. On relational databases this is usually directly
                    translated to SQL.
                </para>
                <para>
                    Note that if this function is translated into SQL, then the semantics of the comparison will
                    depend on the database configuration. In particular, it may be either case-sensitive or
                    case-insensitive.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="matchExpression">The property of entity that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards %,_,[,],^.</param>
            <param name="escapeCharacter">
                The escape character (as a single character string) to use in front of %,_,[,],^
                if they are not used as wildcards.
            </param>
            <returns>true if there is a match.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Match(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String,Microsoft.EntityFrameworkCore.MySqlMatchSearchMode)">
            <summary>
                <para>
                    An implementation of the SQL MATCH operation for Full Text search.
                </para>
                <para>
                    The semantics of the comparison will depend on the database configuration.
                    In particular, it may be either case-sensitive or case-insensitive.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="property">The property of entity that is to be matched.</param>
            <param name="pattern">The pattern against which Full Text search is performed</param>
            <param name="searchMode">Mode in which search is performed</param>
            <returns>true if there is a match.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when query switched to client-evaluation.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Match(Microsoft.EntityFrameworkCore.DbFunctions,System.String[],System.String,Microsoft.EntityFrameworkCore.MySqlMatchSearchMode)">
            <summary>
                <para>
                    An implementation of the SQL MATCH operation for Full Text search.
                </para>
                <para>
                    The semantics of the comparison will depend on the database configuration.
                    In particular, it may be either case-sensitive or case-insensitive.
                </para>
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="properties">The propertys of entity that is to be matched.</param>
            <param name="pattern">The pattern against which Full Text search is performed</param>
            <param name="searchMode">Mode in which search is performed</param>
            <returns>true if there is a match.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when query switched to client-evaluation.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Hex``1(Microsoft.EntityFrameworkCore.DbFunctions,``0)">
             <summary>
                 <para>
                     For a string argument `value`, Hex() returns a hexadecimal string representation of `value` where
                     each byte of each character in `value` is converted to two hexadecimal digits.
                 </para>
                 <para>
                     For a numeric argument `value`, Hex() returns a hexadecimal string representation of `value`
                     treated as a `Int64` (BIGINT) number.
                 </para>
                 <para>
            
                 </para>
             </summary>
             <param name="_">The DbFunctions instance.</param>
             <param name="value">The string or number to convert to a hexadecimal string.</param>
             <returns>The hexadecimal string or `null`.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Unhex(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
            For a string argument `value`, Unhex() interprets each pair of characters in the argument as a hexadecimal
            number and converts it to the byte represented by the number.
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="value">The hexadecimal string to convert to a character string.</param>
            <returns>The string or `null`.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Degrees(Microsoft.EntityFrameworkCore.DbFunctions,System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="radians">The value in radians.</param>
            <returns>The value in degrees.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Degrees(Microsoft.EntityFrameworkCore.DbFunctions,System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="radians">The value in radians.</param>
            <returns>The value in degrees.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Radians(Microsoft.EntityFrameworkCore.DbFunctions,System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="degrees">The value in degrees.</param>
            <returns>The value in radians.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlDbFunctionsExtensions.Radians(Microsoft.EntityFrameworkCore.DbFunctions,System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="_">The DbFunctions instance.</param>
            <param name="degrees">The value in degrees.</param>
            <returns>The value in radians.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions">
            <summary>
                MySQL specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses its default collation.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Boolean)">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses its default collation.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="explicitlyDelegateToChildren">
            Properties/columns don't explicitly inherit the character set if set to <see langword="false"/>.
            They will explicitly inherit the character set if set to <see langword="true"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasCharSet``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses its default collation.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasCharSet``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Boolean)">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses its default collation.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="explicitlyDelegateToChildren">
            Properties/columns don't explicitly inherit the character set if set to <see langword="false"/>.
            They will explicitly inherit the character set if set to <see langword="true"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses its default collation.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses its default collation.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="explicitlyDelegateToChildren">
            Properties/columns don't explicitly inherit the character set if set to <see langword="false"/>.
            They will explicitly inherit the character set if set to <see langword="true"/>.
            </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.CanSetCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
            Returns a value indicating whether the MySQL character set can be set on the table associated with this entity.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true"/> if the mapped table can be configured with the collation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.CanSetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Returns a value indicating whether the given character set delegation modes can be set.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="delegationModes"> The character set delegation modes. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given character set delegation modes can be set as default. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you only specify the collation, MySQL implicitly sets
            the proper character set as well.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Boolean)">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you only specify the collation, MySQL implicitly sets
            the proper character set as well.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="explicitlyDelegateToChildren">
            Properties/columns don't explicitly inherit the collation if set to <see langword="false"/>.
            They will explicitly inherit the collation if set to <see langword="null"/> or <see langword="true"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.UseCollation``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you only specify the collation, MySQL implicitly sets
            the proper character set as well.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.UseCollation``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Boolean)">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you only specify the collation, MySQL implicitly sets
            the proper character set as well.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="explicitlyDelegateToChildren">
            Properties/columns don't explicitly inherit the collation if set to <see langword="false"/>.
            They will explicitly inherit the collation if set to <see langword="null"/> or <see langword="true"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you only specify the collation, MySQL implicitly sets
            the proper character set as well.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you only specify the collation, MySQL implicitly sets
            the proper character set as well.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="explicitlyDelegateToChildren">
            Properties/columns don't explicitly inherit the collation if set to <see langword="false"/>.
            They will explicitly inherit the collation if set to <see langword="null"/> or <see langword="true"/>.
            </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.CanSetCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
            Returns a value indicating whether the MySQL collation can be set on the table associated with this entity.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true"/> if the mapped table can be configured with the collation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.CanSetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Returns a value indicating whether the given collation delegation modes can be set.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="delegationModes"> The collation delegation modes. </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns> <see langword="true" /> if the given collation delegation modes can be set as default. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasTableOption(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
            Sets a table option for the table associated with this entity.
            Can be called more then once to set multiple table options.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table options. </param>
            <param name="value"> The value of the table options. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasTableOption``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)">
            <summary>
            Sets a table option for the table associated with this entity.
            Can be called more then once to set multiple table options.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table options. </param>
            <param name="value"> The value of the table options. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.HasTableOption(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Sets a table option for the table associated with this entity.
            Can be called more then once to set multiple table options.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table options. </param>
            <param name="value"> The value of the table options. </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeBuilderExtensions.CanSetTableOption(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Returns a value indicating whether the table options for the table associated with this entity can be set.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table options. </param>
            <param name="value"> The value of the table options. </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true"/> if the value can be set.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions">
            <summary>
                MySQL specific extension methods for entity types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCharSet(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
            Get the MySQL character set for the table associated with this entity.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The name of the character set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses the default collation.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="charSet"> The name of the character set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
            Sets the MySQL character set on the table associated with this entity. When you only specify the character set, MySQL implicitly
            uses the default collation.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCharSetConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the character set mode.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The configuration source. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns the character set delegation modes for the entity/table.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The character set delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
                Attempts to set the character set delegation modes for entity/table.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Attempts to set the character set delegation modes for entity/table.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCharSetDelegationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the character set delegation modes.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The configuration source. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetActualCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns the actual character set delegation modes for the entity/table.
                Always returns a concrete value and never returns <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.Default"/>.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The actual character set delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCollation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
            Get the MySQL collation for the table associated with this entity.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The name of the collation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you specify the collation, MySQL implicitly sets the
            proper character set as well.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="collation"> The name of the collation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
            Sets the MySQL collation on the table associated with this entity. When you specify the collation, MySQL implicitly sets the
            proper character set as well.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="collation"> The name of the collation. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCollationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the collation mode.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The configuration source. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns the collation delegation modes for the entity/table.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The collation delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
                Attempts to set the collation delegation modes for entity/table.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Attempts to set the collation delegation modes for entity/table.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this entity/table).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetCollationDelegationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the collation delegation modes.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The configuration source. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetActualCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns the actual collation delegation modes for the entity/table.
                Always returns a concrete value and never returns <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.Default"/>.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The actual collation delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetTableOptions(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
            Gets the MySQL table options for the table associated with this entity.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> A dictionary of table options. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetTableOptions(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the MySQL table options for the table associated with this entity.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="options"> A dictionary of table options. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.SetTableOptions(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Sets the MySQL table options for the table associated with this entity.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="options"> A dictionary of table options. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlEntityTypeExtensions.GetTableOptionsConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the table options.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The configuration source. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.IsFullText(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean,System.String)">
            <summary>
            Sets a value indicating whether the index is full text.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="fullText"> The value to set. </param>
            <param name="parser"> An optional argument (e.g. "ngram"), that will be used in an `WITH PARSER` clause. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.IsFullText``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean,System.String)">
            <summary>
            Sets a value indicating whether the index is full text.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="fullText"> The value to set. </param>
            <param name="parser"> An optional argument (e.g. "ngram"), that will be used in an `WITH PARSER` clause. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.IsSpatial(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)">
            <summary>
            Sets a value indicating whether the index is spartial.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="spatial"> The value to set. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.IsSpatial``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)">
            <summary>
            Sets a value indicating whether the index is spartial.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="spatial"> The value to set. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.HasPrefixLength(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Int32[])">
            <summary>
            Sets prefix lengths for the index.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="prefixLengths">The prefix lengths to set, in the order the index columns where specified.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexBuilderExtensions.HasPrefixLength``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Int32[])">
            <summary>
            Sets prefix lengths for the index.
            </summary>
            <param name="indexBuilder"> The index builder. </param>
            <param name="prefixLengths">The prefix lengths to set, in the order the index columns where specified.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <returns> The index builder. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlIndexExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for MySQL-specific metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.IsFullText(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns a value indicating whether the index is full text.
            </summary>
            <param name="index"> The index. </param>
            <returns> <see langword="true"/> if the index is full text. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetIsFullText(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is full text.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetIsFullText(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is full text.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.GetIsFullTextConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is full text.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is full text. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.FullTextParser(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns a value indicating which full text parser to use.
            </summary>
            <param name="index"> The index. </param>
            <returns> The name of the full text parser. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetFullTextParser(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.String)">
            <summary>
                Sets a value indicating which full text parser to used.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetFullTextParser(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.String,System.Boolean)">
            <summary>
                Sets a value indicating which full text parser to used.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.GetFullTextParserConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is full text.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is full text. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.PrefixLength(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns prefix lengths for the index.
            </summary>
            <param name="index"> The index. </param>
            <returns> The prefix lengths.
            A value of `0` indicates, that the full length should be used for that column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Int32[])">
            <summary>
                Sets prefix lengths for the index.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Int32[],System.Boolean)">
            <summary>
                Sets prefix lengths for the index.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.GetPrefixLengthConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the index.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.IsSpatial(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns a value indicating whether the index is spartial.
            </summary>
            <param name="index"> The index. </param>
            <returns> <see langword="true"/> if the index is spartial. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetIsSpatial(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is spartial.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.SetIsSpatial(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is spartial.
            </summary>
            <param name="value"> The value to set. </param>
            <param name="index"> The index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlIndexExtensions.GetIsSpatialConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is spartial.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is spartial. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions">
            <summary>
            Provides methods for supporting translation to MySQL JSON operators and functions.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.AsJson(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
            Explicitly converts <paramref name="value"/> to JSON.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="value">
            The string to convert to JSON.
            </param>
            <returns> The JSON value. </returns>
            <remarks>
            Translates <paramref name="value"/> to `CAST(value as json)` where appropriate on server implementations
            that support the `json` store type.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonType(Microsoft.EntityFrameworkCore.DbFunctions,System.Object)">
            <summary>
            Returns the type of the outermost JSON value as a text string.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <returns> The JSON type as a text string. </returns>
            <remarks> For possible return values see: https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html#function_json-type </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonQuote(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
            Quotes a string as a JSON value by wrapping it with double quote characters and escaping interior quote and
            other characters, then returning the result as a `utf8mb4` string. Returns `null` if the argument is `null`.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="value">
            The string value.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonUnquote(Microsoft.EntityFrameworkCore.DbFunctions,System.Object)">
            <summary>
            Unquotes JSON value and returns the result as a `utf8mb4` string. Returns `null` if the argument is `null`.
            An error occurs if the value starts and ends with double quotes but is not a valid JSON string literal.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonExtract``1(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String[])">
            <summary>
            Returns data from a JSON document, selected from the parts of the document matched by the path arguments.
            Returns `null` if any argument is `null` or no paths locate a value in the document. An error occurs if the
            `json` argument is not a valid JSON document or any path argument is not a valid path expression.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="paths">
            A set of paths to extract from <paramref name="json"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContains(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.Object)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="candidate"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="candidate">
            A JSON column or value. Can be a JSON DOM object, a string, or a user POCO mapped to JSON.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContains(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.Object,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="candidate"/> at a specific <paramref name="path"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="candidate">
            A JSON column or value. Can be a JSON DOM object, a string, or a user POCO mapped to JSON.
            </param>
            <param name="path">
            A string containing a valid JSON path (staring with `$`).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContainsPath(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String)">
            <summary>
            Checks if <paramref name="path"/> exists within <paramref name="json"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="path">A path to be checked inside <paramref name="json"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContainsPathAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String[])">
            <summary>
            Checks if any of the given <paramref name="paths"/> exist within <paramref name="json"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="paths">A set of paths to be checked inside <paramref name="json"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonContainsPathAll(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String[])">
            <summary>
            Checks if all of the given <paramref name="paths"/> exist within <paramref name="json"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="paths">A set of paths to be checked inside <paramref name="json"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonSearchAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="searchString"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="searchString">
            The string to search for.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonSearchAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="searchString"/> under <paramref name="path"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="searchString">
            The string to search for.
            </param>
            <param name="path">
            A string containing a valid JSON path (staring with `$`).
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlJsonDbFunctionsExtensions.JsonSearchAny(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String,System.String,System.String)">
            <summary>
            Checks if <paramref name="json"/> contains <paramref name="searchString"/> under <paramref name="path"/>.
            </summary>
            <param name="_">DbFunctions instance</param>
            <param name="json">
            A JSON column or value. Can be a JSON DOM object, a string property mapped to JSON, or a user POCO mapped to JSON.
            </param>
            <param name="searchString">
            The string to search for.
            </param>
            <param name="path">
            A string containing a valid JSON path (staring with `$`).
            </param>
            <param name="escapeChar">
            Can be `null`, an empty string or a one character wide string used for escaping characters in <paramref name="searchString"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlKeyBuilderExtensions.HasPrefixLength(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.Int32[])">
            <summary>
            Sets prefix lengths for the key.
            </summary>
            <param name="keyBuilder"> The key builder. </param>
            <param name="prefixLengths">The prefix lengths to set, in the order the key columns where specified.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <returns> The key builder. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlKeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for MySQL-specific metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlKeyExtensions.PrefixLength(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Returns prefix lengths for the key.
            </summary>
            <param name="key"> The key. </param>
            <returns> The prefix lengths.
            A value of `0` indicates, that the full length should be used for that column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlKeyExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IMutableKey,System.Int32[])">
            <summary>
                Sets prefix lengths for the key.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="key"> The key. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlKeyExtensions.SetPrefixLength(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Int32[],System.Boolean)">
            <summary>
                Sets prefix lengths for the key.
            </summary>
            <param name="values"> The prefix lengths to set.
            A value of `0` indicates, that the full length should be used for that column. </param>
            <param name="key"> The key. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlKeyExtensions.GetPrefixLengthConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionKey)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the key.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for prefix lengths of the key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MySqlMigrationBuilderExtensions">
            <summary>
                MySQL specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MySqlMigrationBuilderExtensions.IsMySql(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
                <para>
                    Returns true if the database provider currently in use is the MySQL provider.
                </para>
            </summary>
            <param name="migrationBuilder"> The migrationBuilder from the parameters on <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" /> or <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" />. </param>
            <returns> True if MySQL is being used; false otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MySqlMigrationBuilderExtensions.DropPrimaryKey(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropPrimaryKeyAndRecreateForeignKeysOperation" /> to drop an existing primary key and optionally
                recreate all foreign keys of the table.
            </summary>
            <param name="migrationBuilder"> The migrationBuilder from the parameters on <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" /> or <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" />. </param>
            <param name="name"> The name of the primary key constraint to drop. </param>
            <param name="table"> The table that contains the key. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="recreateForeignKeys"> The sole reasion to use this extension method. Set this parameter to `true`, to force all
            foreign keys of the table be be dropped before the primary key is dropped, and created again afterwards.</param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MySqlMigrationBuilderExtensions.DropUniqueConstraint(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropPrimaryKeyAndRecreateForeignKeysOperation" /> to drop an existing unique constraint and optionally
                recreate all foreign keys of the table.
            </summary>
            <param name="migrationBuilder"> The migrationBuilder from the parameters on <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" /> or <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" />. </param>
            <param name="name"> The name of the constraint to drop. </param>
            <param name="table"> The table that contains the constraint. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="recreateForeignKeys"> The sole reasion to use this extension method. Set this parameter to `true`, to force all
            foreign keys of the table be be dropped before the primary key is dropped, and created again afterwards.</param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropPrimaryKeyAndRecreateForeignKeysOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping a primary key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropPrimaryKeyAndRecreateForeignKeysOperation.RecreateForeignKeys">
            <summary>
                Recreate all foreign keys or not.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation">
            <summary>
                A MySql Server-specific <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to create a database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation.Name">
            <summary>
                The name of the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation.CharSet">
            <summary>
                The default character set of the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation">
            <summary>
                A MySql Server-specific <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to drop a database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation.Name">
            <summary>
                The name of the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropUniqueConstraintAndRecreateForeignKeysOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping a primary key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropUniqueConstraintAndRecreateForeignKeysOperation.RecreateForeignKeys">
            <summary>
                Recreate all foreign keys or not.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
            Sets the default character set to use for the model/database.
            </summary>
            <param name="modelBuilder">The model builder.</param>
            <param name="charSet">The name of the character set to use.</param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Boolean)">
            <summary>
            Sets the default character set to use for the model/database.
            </summary>
            <param name="modelBuilder">The model builder.</param>
            <param name="charSet">The name of the character set to use.</param>
            <param name="explicitlyDelegateToChildren">
            Entities/tables (and possibly properties/columns) don't explicitly inherit the character set if set to <see langword="false"/>.
            They will explicitly inherit the character set if set to <see langword="true"/>.
            </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
            Sets the default character set to use for the model/database.
            </summary>
            <param name="modelBuilder">The model builder.</param>
            <param name="charSet">The name of the character set to use.</param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the default character set to use for the model/database.
            </summary>
            <param name="modelBuilder">The model builder.</param>
            <param name="charSet">The name of the character set to use.</param>
            <param name="explicitlyDelegateToChildren">
            Entities/tables (and possibly properties/columns) don't explicitly inherit the character set if set to <see langword="false"/>.
            They will explicitly inherit the character set if set to <see langword="true"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.CanSetCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given character set can be set as default.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="charSet"> The character set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given character set can be set as default. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.CanSetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Returns a value indicating whether the given character set delegation modes can be set.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="delegationModes"> The character set delegation modes. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given character set delegation modes can be set as default. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
                Configures the database collation, which will be used by all columns without an explicit collation. Also finely controls
                where to recursively apply the collation and where not (including this model/database).
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the collation and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Nullable{System.Boolean})">
            <summary>
                Configures the database collation, which will be used by all columns without an explicit collation. Also finely controls
                where to recursively apply the collation and where not (including this model/database).
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <param name="explicitlyDelegateToChildren">
            Entities/tables (and possibly properties/columns) don't explicitly inherit the collation if set to <see langword="false"/>.
            They will explicitly inherit the collation if set to <see langword="true"/>.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Configures the database collation, which will be used by all columns without an explicit collation. Also finely controls
                where to recursively apply the collation and where not (including this model/database).
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the collation and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures the database collation, which will be used by all columns without an explicit collation. Also finely controls
                where to recursively apply the collation and where not (including this model/database).
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <param name="explicitlyDelegateToChildren">
            Entities/tables (and possibly properties/columns) don't explicitly inherit the collation if set to <see langword="false"/>.
            They will explicitly inherit the collation if set to <see langword="null"/> or <see langword="true"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.CanSetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Returns a value indicating whether the given collation delegation modes can be set.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="delegationModes"> The collation delegation modes. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given collation delegation modes can be set as default. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.UseGuidCollation(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the explicit default collation for char-based <see cref="T:System.Guid"/> columns, which will be used by all appropriate
                columns without an explicit collation.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation">
                The <see cref="T:System.Guid"/> default collation to apply.
                An empty string means that no explicit collation will be applied, while <see langword="null"/> means that the default
                collation `ascii_general_ci` will be applied.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.UseGuidCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Configures the explicit default collation for char-based <see cref="T:System.Guid"/> columns, which will be used by all appropriate
                columns without an explicit collation.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation">
                The <see cref="T:System.Guid"/> default collation to apply.
                An empty string means that no explicit collation will be applied, while <see langword="null"/> means that the default
                collation `ascii_general_ci` will be applied.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelBuilderExtensions.CanSetGuidCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given <see cref="T:System.Guid"/> default collation setting can be set.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The <see cref="T:System.Guid"/> default collation setting. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given <see cref="T:System.Guid"/> default collation setting can be set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for properties
                of keys in the model, unless the property has a strategy explicitly set.
            </summary>
            <param name="model"> The model. </param>
            <returns> The default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy})">
            <summary>
                Attempts to set the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for properties
                of keys in the model that don't have a strategy explicitly set.
            </summary>
            <param name="model"> The model. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy},System.Boolean)">
            <summary>
                Attempts to set the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for properties
                of keys in the model that don't have a strategy explicitly set.
            </summary>
            <param name="model"> The model. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />.
            </summary>
            <param name="model"> The model. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetCharSet(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the character set to use as the default for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <returns> The default character set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Attempts to set the character set to use as the default for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <param name="charSet"> The default character set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Attempts to set the character set to use as the default for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <param name="charSet"> The default character set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetCharSetConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default character set of the model/database.
            </summary>
            <param name="model"> The model. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default character set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the character set delegation modes for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <returns> The character set delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
                Attempts to set the character set delegation modes for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Attempts to set the character set delegation modes for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the character set and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetCharSetDelegationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the character set delegation modes of the model/database.
            </summary>
            <param name="model"> The model. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default character set delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetActualCharSetDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the actual character set delegation modes for the model/database.
                Always returns a concrete value and never returns <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.Default"/>.
            </summary>
            <param name="model"> The model. </param>
            <returns> The actual character set delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the collation delegation modes for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <returns> The collation delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes})">
            <summary>
                Attempts to set the collation delegation modes for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the collation and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.DelegationModes},System.Boolean)">
            <summary>
                Attempts to set the collation delegation modes for the model/database.
            </summary>
            <param name="model"> The model. </param>
            <param name="delegationModes">
            Finely controls where to recursively apply the collation and where not (including this model/database).
            Implicitly uses <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/> if set to <see langword="null"/>.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetCollationDelegationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the collation delegation modes of the model/database.
            </summary>
            <param name="model"> The model. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default collation delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetActualCollationDelegation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the actual collation delegation modes for the model/database.
                Always returns a concrete value and never returns <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.Default"/>.
            </summary>
            <param name="model"> The model. </param>
            <returns> The actual collation delegation modes. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetGuidCollation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the default collation used for char-based <see cref="T:System.Guid"/> columns.
            </summary>
            <param name="model"> The model. </param>
            <returns>
                The <see cref="T:System.Guid"/> collation setting.
                An empty string means that no explicit collation will be applied, while <see langword="null"/> means that the default
                collation `ascii_general_ci` will be applied.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetGuidCollation(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Attempts to set the default collation used for char-based <see cref="T:System.Guid"/> columns.
            </summary>
            <param name="model"> The model. </param>
            <param name="collation">
                The <see cref="T:System.Guid"/> collation setting.
                An empty string means that no explicit collation will be applied, while <see langword="null"/> means that the default
                collation `ascii_general_ci` will be applied.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.SetGuidCollation(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Attempts to set the default collation used for char-based <see cref="T:System.Guid"/> columns.
            </summary>
            <param name="model"> The model. </param>
            <param name="collation">
                The <see cref="T:System.Guid"/> collation setting.
                An empty string means that no explicit collation will be applied, while <see langword="null"/> means that the default
                collation `ascii_general_ci` will be applied.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetGuidCollationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:System.Guid"/> collation setting.
            </summary>
            <param name="model"> The model. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlModelExtensions.GetActualGuidCollation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel,System.String)">
            <summary>
                Returns the actual <see cref="T:System.Guid"/> default collation used for char-based <see cref="T:System.Guid"/> columns.
            </summary>
            <param name="model"> The model. </param>
            <param name="defaultCollation"> The default collation to use, if no default collation has been explicitly set. </param>
            <returns>
                <see langword="null"/> if no collation should be set, otherwise the concrete collation to apply.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions">
            <summary>
                MySQL specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                Configures the key property to use the MySQL IDENTITY feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                Configures the key property to use the MySQL IDENTITY feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                Configures the key property to use the MySQL Computed feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate" />.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.UseMySqlComputedColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                Configures the key property to use the MySQL Computed feature to generate values for new entities,
                when targeting MySQL. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate" />.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
            Configures the charset for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="charSet">The name of the charset to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCharSet``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
            Configures the charset for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="charSet">The name of the charset to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
            Configures the charset for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="charSet">The name of the charset to configure for the property's column.</param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.CanSetCharSet(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
            Returns a value indicating whether the MySQL character set can be set on the column associated with this property.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="charSet"> The name of the character set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given value can be set as the character set for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
            Configures the collation for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="collation">The name of the collation to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasCollation``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
            Configures the collation for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="collation">The name of the collation to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Nullable{System.Int32})">
            <summary>
            Restricts the Spatial Reference System Identifier (SRID) for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyBuilderExtensions.HasSpatialReferenceSystem``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Nullable{System.Int32})">
            <summary>
            Restricts the Spatial Reference System Identifier (SRID) for the property's column.
            </summary>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID to configure for the property's column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions">
            <summary>
                MySQL specific extension methods for properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                <para>
                    Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property.
                </para>
                <para>
                    If no strategy is set for the property, then the strategy to use will be taken from the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
                </para>
            </summary>
            <returns> The strategy, or <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.None"/> if none was set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property.
            </summary>
            <remarks>
                If no strategy is set for the property, then the strategy to use will be taken from the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </remarks>
            <param name="overrides">The property overrides.</param>
            <returns>The strategy, or <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.None" /> if none was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The strategy to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy},System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The strategy to use. </param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The strategy to use.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The strategy to use.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="value">The strategy to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy},System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="value">The strategy to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" /> for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.IsCompatibleIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.IdentityColumn"/>.
            </summary>
            <param name="property"> The property. </param>
            <returns> <see langword="true"/> if compatible. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.IsCompatibleAutoIncrementColumn(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with an `AUTO_INCREMENT` column.
            </summary>
            <param name="property"> The property. </param>
            <returns> <see langword="true"/> if compatible. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.IsCompatibleCurrentTimestampColumn(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with a `CURRENT_TIMESTAMP` column default.
            </summary>
            <param name="property"> The property. </param>
            <returns> <see langword="true"/> if compatible. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.IsCompatibleComputedColumn(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with <see cref="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.ComputedColumn"/>.
            </summary>
            <param name="property"> The property. </param>
            <returns> <see langword="true"/> if compatible. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetCharSet(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
            Returns the name of the charset used by the column of the property.
            </summary>
            <param name="property">The property of which to get the columns charset from.</param>
            <returns>The name of the charset or null, if no explicit charset was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetMySqlLegacyCharSet(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
            Returns the name of the charset used by the column of the property, defined as part of the column type.
            </summary>
            <remarks>
            It was common before 5.0 to specify charsets this way, because there were no character set specific annotations available yet.
            Users might still use migrations generated with previous versions and just add newer migrations on top of those.
            </remarks>
            <param name="property">The property of which to get the columns charset from.</param>
            <returns>The name of the charset or null, if no explicit charset was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
            Sets the name of the charset in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns charset for.</param>
            <param name="charSet">The name of the charset used for the column of the property.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetCharSet(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
            Sets the name of the charset in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns charset for.</param>
            <param name="charSet">The name of the charset used for the column of the property.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetCharSetConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
            Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the character set.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the character set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetMySqlLegacyCollation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
            Returns the name of the collation used by the column of the property.
            </summary>
            <param name="property">The property of which to get the columns collation from.</param>
            <returns>The name of the collation or null, if no explicit collation was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
            Returns the Spatial Reference System Identifier (SRID) used by the column of the property.
            </summary>
            <param name="property">The property of which to get the columns SRID from.</param>
            <returns>The SRID or null, if no explicit SRID has been set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})">
            <summary>
            Sets the Spatial Reference System Identifier (SRID) in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns SRID for.</param>
            <param name="srid">The SRID to configure for the property's column.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.SetSpatialReferenceSystem(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets the Spatial Reference System Identifier (SRID) in use by the column of the property.
            </summary>
            <param name="property">The property to set the columns SRID for.</param>
            <param name="srid">The SRID to configure for the property's column.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlPropertyExtensions.GetSpatialReferenceSystemConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
            Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the Spatial Reference System Identifier (SRID).
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the Spatial Reference System Identifier (SRID).</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion">
            <summary>
            Represents a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> for MariaDB database servers.
            For MySQL database servers, use <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> instead.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions">
            <summary>
            Represents the most common JSON change tracking options. Set options either globally with the
            `UseJsonChangeTrackingOptions` extension method when calling `MySqlDbContextOptionsBuilder.UseMicrosoftJson()`
            or `MySqlDbContextOptionsBuilder.UseNewtonsoftJson()`, or for a specific model property when calling
            `PropertyBuilder.UseJsonChangeTrackingOptions()`.
            The default is `RootPropertyOnly`, resulting in the best performance but only limited change tracking support.
            Comparisons will use appropriate `Equals()` methods (including `IEquatablel&lt;T&gt;` implementations) or overloaded
            `==` operators.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.RootPropertyOnly">
            <summary>
            Do not track changes inside of JSON column mapped properties but only for the root property itself.
            For example, if the JSON mapped property is a top level array of `int`, then changes to items of the
            array are not tracked, but changes to the array property itself (the reference) are.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.FullHierarchyOptimizedFast">
            <summary>
            Track all changes in the JSON column mapped property (DOM, POCOs and `string`). This is the fasted option
            with full change tracking support and should be used in most cases where full change tracking support is
            required.
            If the JSON column mapped property implements a `Clone()` or `DeepClone()` method, it is called in snapshot
            generation and assumed to clone the full hierarchy.
            If the JSON column mapped property implements an `Equals(T, T)` method (e.g. for `IEquatable&lt;T&gt;`
            implementations) or overloads the `==` operator, it is being call for equivalence checks for the whole
            hierarchy.
            In case the JSON column mapped property is represented by a JSON DOM object, only its root reference will
            be checked. While this works well for `System.Text.Json`, you should consider the
            `FullHierarchyOptimizedSemantically` option for cases where you are using `Newtonsof.Json`.
            In rare cases, false positives can occur, that will lead to a modified state even if the property is
            semantically equivalent to its original value (e.g. when adding whitespace characters between inner
            properties).
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.FullHierarchyOptimizedSemantically">
            <summary>
            Track all changes in the JSON column mapped property (DOM, POCOs and `string`). This is a medium fast option
            with full change tracking support and should be used only in cases, when the JSON column mapped property is
            represented by a JSON DOM object and change tracking should check for semantic equivalence. For other cases,
            consider the `FullHierarchyOptimizedFast` option instead.
            If the JSON column mapped property implements a `Clone()` or `DeepClone()` method, it is called in snapshot
            generation and assumed to clone the full hierarchy.
            If the JSON column mapped property implements an `Equals(T, T)` method (e.g. for `IEquatable&lt;T&gt;`
            implementations) or overloads the `==` operator, it is being call for equivalence checks for the whole
            hierarchy.
            This option is most usefull when using `Newtonsof.Json`. If instead `System.Text.Json` is being used,
            consider the `FullHierarchyOptimizedFast` option instead for common cases, unless you explicitly require
            semantic equivalence checks.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions.FullHierarchySemantically">
            <summary>
            Track all changes in the JSON column mapped property (DOM, POCOs and `string`). This is the slowest option
            with full change tracking support and should be used only in cases when full semantic equivalence is
            required, because of its high performance impact. This option does not result in false positives (e.g. when
            adding whitespace characters between inner properties).
            Every change tracking comparison is being done by processing the JSON column mapped property by the JSON
            serializer and comparing the result with the original value, that already has been processed in the same
            fashion.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableRetryOnFailure">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32)">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
            <param name="errorNumbersToAdd"> Additional error codes that should be considered transient. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.DisableBackslashEscaping(System.Boolean)">
            <summary>
                Configures string escaping in SQL query generation to ignore backslashes, and assumes
                that `sql_mode` has been set to `NO_BACKSLASH_ESCAPES`.
                This applies to both constant and parameter values (i. e. user input, potentially).
            </summary>
            <param name="setSqlModeOnOpen">When `true`, enables the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SetSqlModeOnOpen" /> option,
            which sets `sql_mode` to `NO_BACKSLASH_ESCAPES` automatically, when a connection has been
            opened. This is the default.
            When `false`, does not change the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SetSqlModeOnOpen" /> option, when calling this method.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SetSqlModeOnOpen">
            <summary>
                When `true`, implicitly executes a `SET SESSION sql_mode` statement after opening
                a connection to the database server, adding the modes enabled by other options.
                When `false`, the `sql_mode` is not being set by the provider and has to be manually
                handled by the caller, to synchronize it with other options that have been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.DisableLineBreakToCharSubstition">
            <summary>
                Skip replacing `\r` and `\n` with `CHAR()` calls in strings inside queries.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.DefaultDataTypeMappings(System.Func{Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDefaultDataTypeMappings,Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDefaultDataTypeMappings})">
            <summary>
                Configures default mappings between specific CLR and MySQL types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.SchemaBehavior(Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior,Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaNameTranslator)">
            <summary>
                Configures the behavior for cases when a schema has been set for an entity. Because
                MySQL does not support the EF Core concept of schemas, the default is to throw an
                exception.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableIndexOptimizedBooleanColumns(System.Boolean)">
            <summary>
                Configures the context to optimize `System.Boolean` mapped columns for index usage,
                by translating `e.BoolColumn` to `BoolColumn = TRUE` and `!e.BoolColumn` to `BoolColumn = FALSE`.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.LimitKeyedOrIndexedStringColumnLength(System.Boolean)">
            <summary>
                Configures the context to automatically limit the length of `System.String` mapped columns, that have not explicitly mapped
                to a store type (e.g. `varchar(1024)`), to ensure that at least two indexed columns will be allowed on a given table (this
                is the default if you don't configure this option).
                If you intend to use `HasPrefixLength()` for those kind of columns, set this option to `false`.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder.EnableStringComparisonTranslations(System.Boolean)">
            <summary>
                Configures the context to translate string related methods, containing a parameter of type <see cref="T:System.StringComparison"/>,
                to their SQL equivalent, even though MySQL might not be able to use indexes when executing the query, resulting in decreased
                performance. Whether MySQL is able to use indexes for the query, depends on the <see cref="T:System.StringComparison"/> option, the
                underlying collation and the scenario.
                It is also possible to just use `EF.Functions.Collate()`, possibly in addition to `string.ToUpper()` if needed, to achieve
                the same result but with full control over the SQL generation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlServerVersion">
            <summary>
            Represents a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> for MySQL database servers.
            For MariaDB database servers, use <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> instead.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ServerVersion">
            <summary>
            The abstract base class of <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> and <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/>.
            Contains static methods to create a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> from a string or to auto detect the server version from a database
            server.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.ToString">
            <summary>
            Returns the server version and type in the format `major.minor.patch-type`.
            </summary>
            <returns>The server version and type string.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)">
            <summary>
            Retrieves the <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> (version number and server type) from a database server.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</returns>
            <remarks>
            Uses a connection string to open a connection to the database server and then executes a command.
            The connection will ignore the database specified in the connection string. It therefore makes not difference, whether the
            database already exists or not.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(MySqlConnector.MySqlConnection)">
            <summary>
            Retrieves the <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> (version number and server type) from a database server.
            </summary>
            <param name="connection">The connection.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</returns>
            <remarks>
            Uses a connection to the database server to execute a command.
            If the connection has already been opened, the connection is is being used as is. Otherwise, the connection is being cloned and
            ignores any database specified in the connection string of the connection. It therefore makes not difference, whether the
            database already exists or not, and the <see cref="T:System.Data.ConnectionState"/> of the <paramref name="connection"/> parameter after the
            return of the call is the same as before the call.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)">
            <summary>
            Converts a string, containing the server version and type, into a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.
            </summary>
            <param name="versionString">The server version (mandatory) and type (optional).</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</returns>
            <remarks>
            The general format is `major.minor.patch-type`, e.g. `8.0.21-mysql` or `10.5.3-mariadb`. If the type is being omitted, it is
            assumed to be MySQL (and not MariaDB).
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String,System.Nullable{Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType})">
            <summary>
            Converts a string, containing the server version and type, into a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.
            </summary>
            <param name="versionString">The server version (mandatory) and type (optional).</param>
            <param name="serverType">The <see cref="T:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType"/> or <see langword="null" />. </param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</returns>
            <remarks>
            The general format is `major.minor.patch-type`, e.g. `8.0.21-mysql` or `10.5.3-mariadb`. If the type is being omitted, it is
            assumed to be MySQL (and not MariaDB). The <paramref name="serverType"/> parameter takes precedence over a server type specified
            in the <paramref name="versionString"/> parameter, if not <see langword="null" />.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)">
            <summary>
            Tries to converts a string, containing the server version and type, into a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.
            </summary>
            <param name="versionString">The server version (mandatory) and type (optional).</param>
            <param name="serverVersion">The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</param>
            <returns><see langword="true" /> if the conversion was successful, otherwise <see langword="false" />.</returns>
            <remarks>
            The general format is `major.minor.patch-type`, e.g. `8.0.21-mysql` or `10.5.3-mariadb`. If the type is being omitted, it is
            assumed to be MySQL (and not MariaDB).
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,System.Nullable{Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType},Microsoft.EntityFrameworkCore.ServerVersion@)">
            <summary>
            Tries to converts a string, containing the server version and type, into a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.
            </summary>
            <param name="versionString">The server version (mandatory) and type (optional).</param>
            <param name="serverType">The <see cref="T:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType"/> or <see langword="null" />. </param>
            <param name="serverVersion">The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</param>
            <returns><see langword="true" /> if the conversion was successful, otherwise <see langword="false" />.</returns>
            <remarks>
            The general format is `major.minor.patch-type`, e.g. `8.0.21-mysql` or `10.5.3-mariadb`. If the type is being omitted, it is
            assumed to be MySQL (and not MariaDB). The <paramref name="serverType"/> parameter takes precedence over a server type specified
            in the <paramref name="versionString"/> parameter, if not <see langword="null" />.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)">
            <summary>
            Creates a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> object from a version and type.
            </summary>
            <param name="version">The <see cref="P:Microsoft.EntityFrameworkCore.ServerVersion.Version"/> of the database server.</param>
            <param name="serverType">The <see cref="T:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType"/> of the database server.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</returns>
            <remarks>
            Call this static method to obtain a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> object to use in a `UseMySql()` call.
            Alternatively, directly instantiate an instance of the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> or <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/>
            classes using <see langword="new"/>, or call the static `Parse()`, `TryParse()` or `AutoDetect()` methods.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Int32,System.Int32,System.Int32,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)">
            <summary>
            Creates a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> object from a version and type.
            </summary>
            <param name="major">The major version of the database server.</param>
            <param name="minor">The minor version of the database server.</param>
            <param name="patch">The patch level of the database server.</param>
            <param name="serverType">The <see cref="T:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType"/> of the database server.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/>.</returns>
            <remarks>
            Call this static method to obtain a <see cref="T:Microsoft.EntityFrameworkCore.ServerVersion"/> object to use in a `UseMySql()` call.
            Alternatively, directly instantiate an instance of the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> or <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/>
            classes using <see langword="new"/>, or call the static `Parse()`, `TryParse()` or `AutoDetect()` methods.
            </remarks>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder.CreateConventionSet">
            <summary>
                Builds and returns the convention set for the current database provider.
            </summary>
            <returns> The convention set for the current database provider. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.MySqlConventionSetBuilder.Build">
            <summary>
                <para>
                    Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" /> for MySQL when using
                    the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
                </para>
                <para>
                    Note that it is unusual to use this method.
                    Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
                </para>
            </summary>
            <returns> The convention set. </returns>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.None">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.IdentityColumn">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy.ComputedColumn">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DelegationModes">
            <summary>
            Provides precice control over recursive character set or collation delegation/inheritance aspects.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DelegationModes.Default">
            <summary>
            The current default is <see cref="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll"/>.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToDatabases">
            <summary>
            Applys the character set or collation to databases.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToTables">
            <summary>
            Applys the character set or collation to tables.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToColumns">
            <summary>
            Applys the character set or collation to columns.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DelegationModes.ApplyToAll">
            <summary>
            Applys the character set or collation to all objects.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <remarks>
                The default retry limit is 6, which means that the total amount of time spent before failing is about a minute.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="context"> The context on which the operations will be invoked. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
            <param name="errorNumbersToAdd"> Additional SQL error numbers that should be considered transient. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.MySqlRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies"> Parameter object containing service dependencies. </param>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxRetryDelay"> The maximum delay between retries. </param>
            <param name="errorNumbersToAdd"> Additional SQL error numbers that should be considered transient. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.MySqlJsonString">
            <summary>
            This class can be used to represent a string that contains valid JSON data. When used in database queries
            against server implementations that support the `JSON` store type, a `CAST(mySqlJsonString as json)` clause will
            be generated where necessary.
            To mark a string as containing JSON data, just cast the string to `MySqlJsonString`.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MySqlServiceCollectionExtensions.AddMySql``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.EntityFrameworkCore.ServerVersion,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.MySqlDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
                <para>
                    Registers the given Entity Framework context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
                    and configures it to connect to a MySQL compatible database.
                </para>
                <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure the Pomelo.EntityFrameworkCore.MySql provider and connection string.
                </para>
                <para>
                    To configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> for the context, either override the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context, or supply
                    an optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.
                </para>
                <para>
                    For more information on how to use this method, see the Entity Framework Core documentation at https://aka.ms/efdocs.
                    For more information on using dependency injection, see https://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            </summary>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <param name="connectionString"> The connection string of the database to connect to. </param>
            <param name="serverVersion">
                <para>
                    The version of the database server.
                </para>
                <para>
                    Create an object for this parameter by calling the static method
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Create(System.Version,Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType)"/>,
                    by calling the static method <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(System.String)"/> (which retrieves the server version directly
                    from the database server),
                    by parsing a version string using the static methods
                    <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.Parse(System.String)"/> or <see cref="M:Microsoft.EntityFrameworkCore.ServerVersion.TryParse(System.String,Microsoft.EntityFrameworkCore.ServerVersion@)"/>,
                    or by directly instantiating an object from the <see cref="T:Microsoft.EntityFrameworkCore.MySqlServerVersion"/> (for MySQL) or
                    <see cref="T:Microsoft.EntityFrameworkCore.MariaDbServerVersion"/> (for MariaDB) classes.
                 </para>
            </param>
            <param name="mySqlOptionsAction"> An optional action to allow additional MySQL specific configuration. </param>
            <param name="optionsAction"> An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. </param>
            <returns> The same service collection so that multiple calls can be chained. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.Info">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.Clone">
            <summary>
                Override this method in a derived class to ensure that any clone created is also of that class.
            </summary>
            <returns> A clone of this instance, which can be modified before being returned as immutable. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.WithJsonChangeTrackingOptions(Microsoft.EntityFrameworkCore.MySqlCommonJsonChangeTrackingOptions)">
            <summary>
                The change tracking option that will be used as the default for all JSON column mapped properties.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.WithJsonChangeTrackingOptions(Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlJsonOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.Info">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.ServerVersion">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.NoBackslashEscapes">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.UpdateSqlModeOnOpen">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithServerVersion(Microsoft.EntityFrameworkCore.ServerVersion)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithDisabledBackslashEscaping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.WithSettingSqlModeOnOpen">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.MySqlOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDefaultDataTypeMappings.WithClrTimeOnly(System.Nullable{System.Int32})">
            <summary>
            Set the default precision for `TimeOnly` CLR type mapping to a MySQL TIME type.
            Set <paramref name="precision"/> to <see langword="null"/>, to use the highest supported precision.
            Otherwise, set <paramref name="precision"/> to a valid value between `0` and `6`.
            </summary>
            <param name="precision">The precision used for the MySQL TIME type.</param>
            <returns>The same instance, to allow chained method calls.</returns>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlBooleanType.None">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlBooleanType.Default">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlBooleanType.TinyInt1">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlBooleanType.Bit1">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDateTimeType.Default">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDateTimeType.DateTime">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDateTimeType.DateTime6">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDateTimeType.Timestamp6">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlDateTimeType.Timestamp">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlTimeSpanType.Default">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlTimeSpanType.Time">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlTimeSpanType.Time6">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Throw">
            <summary>
            Throw an exception if a schema is being used. Any specified translator delegate will be ignored.
            This is the default.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Ignore">
            <summary>
            Silently ignore any schema definitions. Any specified translator delegate will be ignored.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Translate">
            <summary>
            Use the specified translator delegate to translate from an input schema and object name to
            an output object name whenever a schema is being used.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType.Custom">
            <summary>
            Custom server implementation
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType.MySql">
            <summary>
            MySQL server
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType.MariaDb">
            <summary>
            MariaDB server
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.DecimalTypeDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ByteIdentityColumnWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.DefaultSchemaFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.TypeAliasFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ForeignKeyReferencesMissingPrincipalTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.MissingSchemaWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean,System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlLoggerExtensions.DefaultValueNotSupportedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},System.String,Microsoft.EntityFrameworkCore.ServerVersion,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies,Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlModelValidator.ValidateStoredProcedures(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlJsonStrings.JsonServicesMissing">
            <summary>
              Looks up a localized string similar to UseMicrosoftJson requires AddEntityFrameworkMySqlJson to be called on the internal service provider used..
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.IdentityBadType(System.Object,System.Object,System.Object)">
            <summary>
                Identity value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Identity value generation can only be used with integer, DateTime, and DateTimeOffset properties.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.UnqualifiedDataType(System.Object)">
            <summary>
                Data type '{dataType}' is not supported in this form. Either specify the length explicitly in the type name, for example as '{dataType}(16)', or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.UnqualifiedDataTypeOnProperty(System.Object,System.Object)">
            <summary>
                Data type '{dataType}' for property '{property}' is not supported in this form. Either specify the length explicitly in the type name, for example as '{dataType}(16)', or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.SequenceBadType(System.Object,System.Object,System.Object)">
            <summary>
                MySQL sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.IndexTableRequired">
            <summary>
                MySQL requires the table name to be specified for rename index operations. Specify table name in the call to MigrationBuilder.RenameIndex.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.AlterMemoryOptimizedTable">
            <summary>
                To set memory-optimized on a table on or off the table needs to be dropped and recreated.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.AlterIdentityColumn">
            <summary>
                To change the IDENTITY property of a column, the column needs to be dropped and recreated.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.TransientExceptionDetected">
            <summary>
                An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding 'EnableRetryOnFailure()' to the 'UseMySql' call.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.NonKeyValueGeneration(System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is configured to use 'SequenceHiLo' value generator, which is only intended for keys. If this was intentional configure an alternate key on the property, otherwise call 'ValueGeneratedNever' or configure store generation for this property.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.MultipleIdentityColumns(System.Object,System.Object)">
            <summary>
                The properties {properties} are configured to use 'Identity' value generator and are mapped to the same table '{table}'. Only one column per table can be configured as 'Identity'. Call 'ValueGeneratedNever' for properties that should not use 'Identity'.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.IncompatibleTableMemoryOptimizedMismatch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and entity type '{memoryOptimizedEntityType}' is marked as memory-optimized, but entity type '{nonMemoryOptimizedEntityType}' is not.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.NoInitialCatalog">
            <summary>
                The database name could not be determined. To use EnsureDeleted, the connection string must specify Initial Catalog.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.DuplicateColumnNameValueGenerationStrategyMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different value generation strategies.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.InvalidTableToIncludeInScaffolding(System.Object)">
            <summary>
                The specified table '{table}' is not valid. Specify tables using the format '[schema].[table]'.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.FunctionOnClient(System.Object)">
            <summary>
                The '{methodName}' method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.ComputedBadType(System.Object,System.Object,System.Object)">
            <summary>
                Computed value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Computed value generation can only be used with DateTime and DateTimeOffset properties.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.ExpressionTypeMismatch">
            <summary>
                The specified expression does not have the correct Type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.QueryUnableToTranslateMethodWithStringComparison(System.Object,System.Object,System.Object)">
            <summary>
                Translation of the '{declaringTypeName}.{methodName}' overload with a 'StringComparison' parameter is not supported by default. To opt-in to translations of methods with a 'StringComparison' parameter, call `{optionName}` on your MySQL specific 'DbContext' options. For general EF Core information about this error, see https://go.microsoft.com/fwlink/?linkid=2129535 for more information.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.StoredProcedureResultColumnsNotSupported(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to the stored procedure '{sproc}', which is configured with result columns. MySQL stored procedures do not support result columns; use output parameters instead.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlStrings.StoredProcedureReturnValueNotSupported(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to the stored procedure '{sproc}', which is configured with a return value. MySQL stored procedures do not support return values; use an output parameter instead.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogDefaultDecimalTypeColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                No type was specified for the decimal column '{property}' on entity type '{entityType}'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using 'ForHasColumnType()'.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogByteIdentityColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The property '{property}' on entity type '{entityType}' is of type 'byte', but is set up to use a MySQL identity column. This requires that values starting at 255 and counting down will be used for temporary key values. A temporary key value is needed for every entity inserted in a single call to 'SaveChanges'. Care must be taken that these values do not collide with real key values.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundDefaultSchema(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found default schema {defaultSchema}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundTypeAlias(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found type alias with name: {alias} which maps to underlying data type {dataType}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found column with table: {tableName}, column name: {columnName}, ordinal: {ordinal}, data type: {dataType}, maximum length: {maxLength}, precision: {precision}, scale: {scale}, nullable: {isNullable}, identity: {isIdentity}, default value: {defaultValue}, computed value: {computedValue}
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundForeignKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found foreign key on table: {tableName}, name: {foreignKeyName}, principal table: {principalTableName}, delete action: {deleteAction}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogPrincipalTableNotInSelectionSet(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogMissingSchema(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a schema in the database matching the selected schema {schema}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogMissingTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a table in the database matching the selected table {table}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundSequence(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found table with name: {name}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundIndex(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundPrimaryKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found primary key with name: {primaryKeyName}, table: {tableName}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogFoundUniqueConstraint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found unique constraint with name: {uniqueConstraintName}, table: {tableName}.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogPrincipalColumnNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                For foreign key {foreignKeyName} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Internal.MySqlResources.LogDefaultValueNotSupported(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The default value '{defaultValue}' is being ignored, because the database server version {version} does not support constant
                default values for type '{type}' and does not support default value expressions in general.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCharSetAttributeConvention">
            <summary>
                A convention that configures the column's character set for a property or field based on the applied <see cref="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCharSetAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCharSetAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCharSetAttributeConvention.ProcessPropertyAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,Microsoft.EntityFrameworkCore.MySqlCharSetAttribute,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCollationAttributeConvention">
            <summary>
                A convention that configures the column's collation for a property or field based on the applied <see cref="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCollationAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCollationAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.ColumnCollationAttributeConvention.ProcessPropertyAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,Microsoft.EntityFrameworkCore.MySqlCollationAttribute,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention">
            <summary>
                A convention that configures store value generation as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd"/> on properties that are
                part of the primary key and not part of any foreign keys, were configured to have a database default value
                or were configured to use a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.MySqlValueGenerationStrategy"/>.
                It also configures properties as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate"/> if they were configured as computed columns.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder"> The builder for the property. </param>
            <param name="name"> The annotation name. </param>
            <param name="annotation"> The new annotation. </param>
            <param name="oldAnnotation"> The old annotation.  </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property"> The property. </param>
            <returns> The store value generation strategy to set for the given property. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.MySqlValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> The store value generation strategy to set for the given property. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCharSetAttributeConvention">
            <summary>
                A convention that configures the character set for an entity based on the applied <see cref="T:Microsoft.EntityFrameworkCore.MySqlCharSetAttribute" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCharSetAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCharSetAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCharSetAttributeConvention.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.MySqlCharSetAttribute,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCollationAttributeConvention">
            <summary>
                A convention that configures the collation for an entity based on the applied <see cref="T:Microsoft.EntityFrameworkCore.MySqlCollationAttribute" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCollationAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCollationAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Conventions.TableCollationAttributeConvention.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.MySqlCollationAttribute,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames.Prefix">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.MySqlAnnotationNames.ValueGenerationStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Metadata.Internal.ObjectToEnumConverter.GetEnumValue``1(System.Object)">
            <summary>
            Can be used to allow substitution of enum values with their underlying type in annotations, so that multi-provider models can
            be setup without provider specific dependencies.
            </summary>
            <remarks>
            See https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/1205 for further information.
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetBeginIfNotExistsScript(System.String)">
            <summary>
                Overridden by database providers to generate a SQL Script that will `BEGIN` a block
                of SQL if and only if the migration with the given identifier does not already exist in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetBeginIfExistsScript(System.String)">
            <summary>
                Overridden by database providers to generate a SQL Script that will `BEGIN` a block
                of SQL if and only if the migration with the given identifier already exists in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetBeginIfScript(System.String,System.Boolean)">
            <summary>
                Overridden by database providers to generate a SQL script to `END` the SQL block.
            </summary>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlHistoryRepository.GetEndIfScript">
            <summary>
                Overridden by database providers to generate a SQL script to `END` the SQL block.
            </summary>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer.MakeStringColumnsRequiredWithoutUnexpectedDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Metadata.IColumn,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation})">
            <summary>
            Use a one-time `UPDATE` statement instead of an `ALTER COLUMN` operation in cases, where a non-required (`NULL`) string
            property is changed to a required (`NOT NULL`) one.
            EF Core generates an `ALTER COLUMN` statement with an unexpected default value of an empty string for those properties.
            While it is usually nice to have existing `NULL` values converted to empty strings, this should be a one-time operation and have
            no side effects on the table structure itself (so it should not introduce an unexpected default value).
            </summary>
            <remarks>
            See https://github.com/dotnet/efcore/issues/25899
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer.SkipRedundantCharSetSpecifyingAlterColumnOperations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation})">
            <remarks>
            When generating the first migration in Pomelo 5.0+, after previously using Pomelo 3.x, a significant amount of
            AlterColumnOperation might be generated, that don't really need to change anything in the database, because the legacy way of
            specifying a character set was used before and now the store type got cleaned-up and a CharSet annotation got added.
            This method ensures, that no useless operations get generated for this case.
            Everything between the old and the new column needs to be the same, except the store type definition, which contains the
            charset clause in the old, but not in the new store type.
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.Internal.MySqlMigrationsModelDiffer.AssertAllMigrationOperationProperties">
            <summary>
            Ensure, that no properties have been added by the EF Core team in the meantime.
            If they have, they may need to be added to checks in methods of this class
            (search for "Depends on AssertMigrationOperationProperties check").
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator">
            <summary>
                MySql-specific implementation of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" />.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> by making calls on the given
                    <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    This method uses a double-dispatch mechanism to call one of the 'Generate' methods that are
                    specific to a certain subtype of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />. Typically database providers
                    will override these specific methods rather than this method. However, providers can override
                    this methods to handle provider-specific operations.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            /// <summary>
                Ignored, since schemas are not supported by MySQL and are silently ignored to improve testing compatibility.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Ignored, since schemas are not supported by MySQL and are silently ignored to improve testing compatibility.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlCreateDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MySqlDropDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.SequenceOptions(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment configuring a sequence with the given options.
            </summary>
            <param name="schema"> The schema that contains the sequence, or <see langword="null"/> to use the default schema. </param>
            <param name="name"> The sequence name. </param>
            <param name="operation"> The sequence options. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ColumnDefinition(Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition in an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition for the given column metadata.
            </summary>
            <param name="schema"> The schema that contains the table, or <see langword="null"/> to use the default schema. </param>
            <param name="table"> The table that contains the column. </param>
            <param name="name"> The column name. </param>
            <param name="operation"> The column metadata. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.CreateTablePrimaryKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the primary key constraint of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ForeignKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a foreign key constraint of an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.IndexTraits(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for traits of an index from a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" />,
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" />, or <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null"/> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ForeignKeyAction(Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the given referential action.
            </summary>
            <param name="referentialAction"> The referential action. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
            Use VALUES batches for INSERT commands where possible.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Migrations.MySqlMigrationsSqlGenerator.ColumnListWithIndexPrefixLengthAndSortOrder(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,System.String[],System.Int32[],System.Boolean[])">
            <remarks>
            There is no need to check for explicit index collation/descending support, because ASC and DESC modifiers are being silently
            ignored in versions of MySQL and MariaDB, that do not support them.
            </remarks>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpressionOperatorType.IntegerDivision">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpressionOperatorType.NonOptimizedEqual">
            <summary>
            Use to force an equals expression, that will not be optimized by EF Core.
            Can be used, to force a `value = TRUE` expression.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression">
            <summary>
                An expression that explicitly specifies the collation of a string value.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.ValueExpression">
            <summary>
                The expression for which a collation is being specified.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Charset">
            <summary>
                The character set that the string is being converted to.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Collation">
            <summary>
                The collation that the string is being converted to.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Reduces the node and then calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" /> method passing the
                reduced expression.
                Throws an exception if the node isn't reducible.
            </summary>
            <param name="visitor"> An instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />. </param>
            <returns> The expression being visited, or an expression which should replace it in the tree. </returns>
            <remarks>
                Override this method to provide logic to walk the node's children.
                A typical implementation will call visitor.Visit on each of its
                children, and if any of them change, should return a new copy of
                itself with the modified children.
            </remarks>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.Equals(System.Object)">
            <summary>
                Tests if this object is considered equal to another.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns>
                true if the objects are considered equal, false if they are not.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.GetHashCode">
            <summary>
                Returns a hash code for this object.
            </summary>
            <returns>
                A hash code for this object.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression.ToString">
            <summary>
                Creates a <see cref="T:System.String" /> representation of the Expression.
            </summary>
            <returns>A <see cref="T:System.String" /> representation of the Expression.</returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlColumnAliasReferenceExpression">
            <summary>
            Allows to reference an alias from within the same SELECT statement, e.g. in a HAVING clause.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.ArgumentParts">
            <summary>
                The arguments parts.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.GetHashCode">
            <summary>
                Returns a hash code for this object.
            </summary>
            <returns>
                A hash code for this object.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression.ToString">
            <summary>
                Creates a <see cref="T:System.String" /> representation of the Expression.
            </summary>
            <returns>A <see cref="T:System.String" /> representation of the Expression.</returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonArrayIndexExpression">
            <summary>
            Represents a MySQL JSON array index (i.e. x[y]).
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression">
            <summary>
            Represents a MySQL JSON operator traversing a JSON document with a path (i.e. x->y or x->>y)
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression.Expression">
            <summary>
            The JSON column.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression.Path">
            <summary>
            The path inside the JSON column.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression.ReturnsText">
            <summary>
            Whether the text-returning operator (x->>y) or the object-returning operator (x->y) is used.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlConvertTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlConvertTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlDbFunctionsExtensionsMethodTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionTranslators.Internal.MySqlDbFunctionsExtensionsMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlBoolOptimizingExpressionVisitor">
            <summary>
            "WHERE `boolColumn`" doesn't use available indices, while "WHERE `boolColumn` = TRUE" does.
            See https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/1104
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlBug96947WorkaroundExpressionVisitor">
             <summary>
             When using constant values in an LEFT JOIN, an later an ORDER BY is applied, MySQL 5.7+ will incorrectly return a NULL values for
             some columns.
             This is not an issue with any MariaDB release and not an issue with MySQL 5.6.
            
             See https://bugs.mysql.com/bug.php?id=96947
                 https://github.com/OData/WebApi/issues/2124
                 https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/1293
             </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlHavingExpressionVisitor.MySqlContainsAggregateFunctionExpressionVisitor">
            <summary>
            Looks for aggregate functions (like SUM(), AVG() etc.) in an expression tree, but not in subqueries.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies,Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.IMySqlOptions)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlQuerySqlGenerator.CheckComposableSql(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.ExpressionVisitors.Internal.MySqlSqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.IMySqlEvaluatableExpressionFilter.IsEvaluatableExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Checks whether the given expression can be evaluated.
            </summary>
            <param name="expression"> The expression. </param>
            <param name="model"> The model. </param>
            <returns>
            <see langword="true" /> if the expression can be evaluated, <see langword="false" /> if it can't and <see langword="null" /> if
            it doesn't handle the given expression.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCompiledQueryCacheKeyGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlCompiledQueryCacheKeyGenerator.GenerateCacheKey(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlDateDiffFunctionsTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMethodCallTranslatorPlugin.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlJsonMethodCallTranslatorPlugin.Translators">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlMathMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <inheritdoc />
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlObjectToStringTranslator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlParameterBasedSqlProcessor.ProcessSqlNullability(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryableMethodTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryableMethodTranslatingExpressionVisitorFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryableMethodTranslatingExpressionVisitorFactory.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlQueryableMethodTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlExpressionFactory.NullableFunction(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,System.Boolean)">
            <summary>
            Use for any function that could return `NULL` for *any* reason.
            </summary>
            <param name="name">The SQL name of the function.</param>
            <param name="arguments">The arguments of the function.</param>
            <param name="returnType">The CLR return type of the function.</param>
            <param name="onlyNullWhenAnyNullPropagatingArgumentIsNull">
            Set to `false` if the function can return `NULL` even if all of the arguments are not `NULL`. This will disable null-related
            optimizations by EF Core.
            </param>
            <remarks>See https://github.com/dotnet/efcore/issues/23042</remarks>
            <returns>The function expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlExpressionFactory.NullableFunction(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Use for any function that could return `NULL` for *any* reason.
            </summary>
            <param name="name">The SQL name of the function.</param>
            <param name="arguments">The arguments of the function.</param>
            <param name="returnType">The CLR return type of the function.</param>
            <param name="typeMapping">The optional type mapping of the function.</param>
            <param name="onlyNullWhenAnyNullPropagatingArgumentIsNull">
                Set to `false` if the function can return `NULL` even if all of the arguments are not `NULL`. This will disable null-related
                optimizations by EF Core.
            </param>
            <param name="argumentsPropagateNullability">
                The optional nullability array of the function.
                If omited and <paramref name="onlyNullWhenAnyNullPropagatingArgumentIsNull"/> is
                `true` (the default), all parameters will propagate nullability (meaning if any parameter is `NULL`, the function will
                automatically return `NULL` as well).
                If <paramref name="onlyNullWhenAnyNullPropagatingArgumentIsNull"/> is explicitly set to `false`, the
                null propagating capabilities of the arguments don't matter at all anymore, because the function will never be optimized by
                EF Core in the first place.
            </param>
            <remarks>See https://github.com/dotnet/efcore/issues/23042</remarks>
            <returns>The function expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlExpressionFactory.NonNullableFunction(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
            Use for any function that will never return `NULL`.
            </summary>
            <param name="name">The SQL name of the function.</param>
            <param name="arguments">The arguments of the function.</param>
            <param name="returnType">The CLR return type of the function.</param>
            <param name="typeMapping">The optional type mapping of the function.</param>
            <remarks>See https://github.com/dotnet/efcore/issues/23042</remarks>
            <returns>The function expression.</returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor">
            <inheritdoc />
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor" /> class.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this class.</param>
            <param name="useRelationalNulls">A bool value indicating whether relational null semantics are in use.</param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitCustomSqlExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitBinary(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits a <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpression" /> and computes its nullability.
            </summary>
            <param name="binaryExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlBinaryExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitCollate(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits a <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression" /> and computes its nullability.
            </summary>
            <param name="collateExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlCollateExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitComplexFunctionArgument(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits a <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression" /> and computes its nullability.
            </summary>
            <param name="complexFunctionArgumentExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlComplexFunctionArgumentExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitMatch(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlMatchExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits a <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlMatchExpression" /> and computes its nullability.
            </summary>
            <param name="matchExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlMatchExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitJsonArrayIndex(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonArrayIndexExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits an <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonArrayIndexExpression" /> and computes its nullability.
            </summary>
            <param name="jsonArrayIndexExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonArrayIndexExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitJsonTraversal(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits a <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression" /> and computes its nullability.
            </summary>
            <param name="jsonTraversalExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlJsonTraversalExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Query.Internal.MySqlSqlNullabilityProcessor.VisitRegexp(Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlRegexpExpression,System.Boolean,System.Boolean@)">
            <summary>
            Visits a <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlRegexpExpression" /> and computes its nullability.
            </summary>
            <param name="regexpExpression">A <see cref="T:Pomelo.EntityFrameworkCore.MySql.Query.Expressions.Internal.MySqlRegexpExpression" /> expression to visit.</param>
            <param name="allowOptimizedExpansion">A bool value indicating if optimized expansion which considers null value as false value is allowed.</param>
            <param name="nullable">A bool value indicating whether the sql expression is nullable.</param>
            <returns>An optimized sql expression.</returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerator">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlCodeGenerator.GenerateUseProvider(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.EscapeLiteral(System.String)">
            <summary>
            Wraps a string literal in single quotes.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.GetSequences(System.Data.Common.DbConnection)">
            <summary>
            Queries the database for defined sequences and registers them with the model.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal.MySqlDatabaseModelFactory.ConvertDefaultValueFromMariaDbToMySql(System.String,System.Boolean@)">
            <summary>
            MariaDB 10.2.7+ implements default values differently from MySQL, to support their own default expression
            syntax. We convert their column values to MySQL compatible syntax here.
            See https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/issues/994#issuecomment-568271740
            for tables with differences.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IDefaultValueCompatibilityAware.Clone(System.Boolean)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="isDefaultValueCompatible"> Use a default value compatible syntax, or not. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection.CreateMasterConnection">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlBoolTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.#ctor(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.#ctor(System.Data.DbType,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlByteArrayTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies,Pomelo.EntityFrameworkCore.MySql.Storage.Internal.IMySqlRelationalConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.RetryDelay">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.RetryTimeout">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.CreateAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.HasTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.Exists">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.Delete">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.#ctor(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.Clone(System.Boolean)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="isDefaultValueCompatible"> Use a default value compatible syntax, or not. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeOffsetTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.#ctor(System.String,System.Nullable{System.Int32},System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.Clone(System.Boolean)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="isDefaultValueCompatible"> Use a default value compatible syntax, or not. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTimeTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.DateTime" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.Clone(System.Boolean)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="isDefaultValueCompatible"> Use a default value compatible syntax, or not. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDateTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.SqlLiteralFormatString">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDecimalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlDoubleTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.RetriesOnFailure">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategyFactory.CreateDefaultStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlFloatTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlGuidTypeMapping.CloneAsJsonCompatible">
            <summary>
            For JSON values, we will always use the 36 character string representation.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.None">
            <summary>
            The default is to serialize everything, which is the most precise, but also the slowest.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareRootPropertyOnly">
            <summary>
            Do not track changes inside of JSON mapped properties but only for the root property itself.
            For example, if the JSON mapped property is a top level array of `int`, then changes to items of the
            array are not tracked, but changes to the array property itself (the reference) are.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareStringRootPropertyByEquals">
            <summary>
            Compare strings as is, without further processing. This means that adding whitespaces between inner
            properties of a JSON object, that have no effect at all to the JSON object itself, would lead to a change
            being discovered to the JSON object, resulting in the JSON mapped property being marked as modified.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareDomRootPropertyByEquals">
            <summary>
            Only check the JSON root property for DOM objects.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.CompareDomSemantically">
            <summary>
            Traverse the DOM to check for changes.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.HashDomSemantially">
            <summary>
            Fully traverse the DOM to generate a hash.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.HashDomSemantiallyOptimized">
            <summary>
            Traverse part of the DOM to generate a hash.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.SnapshotCallsDeepClone">
            <summary>
            Call DeepClone() whenever a type, for which a snapshot needs to be generated, implements it.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlJsonChangeTrackingOptions.SnapshotCallsClone">
            <summary>
            Call Clone() whenever a type, for which a snapshot needs to be generated, implements it.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.EscapeIdentifier(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.EscapeIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.String,System.String)">
            <summary>
                Generates the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="name">The identifier to delimit.</param>
            <param name="schema">The schema of the identifier.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Writes the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="name">The identifier to delimit.</param>
            <param name="schema">The schema of the identifier.</param>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,MySqlConnector.MySqlDbType,Pomelo.EntityFrameworkCore.MySql.Infrastructure.Internal.IMySqlOptions,System.Boolean,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlStringTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Boolean)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping.Clone(System.Boolean)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="isDefaultValueCompatible"> Use a default value compatible syntax, or not. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTimeTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a non-null literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTransientExceptionDetector">
            <summary>
                Detects the exceptions caused by MySQL transient failures.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTransientExceptionDetector.ShouldRetryOn(System.Exception)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping">
            <summary>
            The base class for mapping MySql-specific types. It configures parameters with the
            <see cref="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping.MySqlDbType"/> provider-specific type enum.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping.MySqlDbType">
            <summary>
            The database type used by MySql.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,MySqlConnector.MySqlDbType)">
            <summary>
            Constructs an instance of the <see cref="T:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMapping"/> class.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <param name="mySqlDbType">The database type of the range subtype.</param>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.ConsumeResultSet(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />,
                propagating values back into the <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />.
            </summary>
            <param name="startCommandIndex">The ordinal of the first command being consumed.</param>
            <param name="reader">The data reader.</param>
            <returns>The ordinal of the next result set that must be consumed.</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.ConsumeResultSetAsync(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader,System.Threading.CancellationToken)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />,
                propagating values back into the <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />.
            </summary>
            <param name="startCommandIndex">The ordinal of the first result set being consumed.</param>
            <param name="reader">The data reader.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task contains the ordinal of the next command that must be consumed.
            </returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch.TryAddCommand(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand)">
            <summary>
            We override this method only to support our _pendingParameters field.
            </summary>
        </member>
        <member name="F:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatch._pendingParameters">
            <summary>
            We use _pendingParameters only to support our AddParameter implementation.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatchFactory.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatchFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlModificationCommandBatchFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.Update.Internal.MySqlUpdateSqlGenerator.GetProcedureCallOutParameterVariableName(System.String)">
            <summary>
            Returns the name (without the @ prefix) used for any temporary user variables, that need to be declared to get values out of a
            stored procedure.
            </summary>
            <param name="commandParameterName">The name of the parameter of the command that executes the CALL statement.</param>
            <returns>The variable name (without the @ prefix).</returns>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlSequentialGuidValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                Gets a value to be assigned to a property.
                Creates a GUID where the first 8 bytes are the current UTC date/time (in ticks)
                and the rest are cryptographically random. This allows for better performance
                in clustered index scenarios.
            </summary>
            <para>The change tracking entry of the entity for which the value is being generated.</para>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="P:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlSequentialGuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns false, meaning the generated values will be saved to the database.
            </summary>
        </member>
        <member name="M:Pomelo.EntityFrameworkCore.MySql.ValueGeneration.Internal.MySqlValueGeneratorSelector.Create(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:System.Data.Common.DbDataRecordExtensions.GetValueOrDefault``1(System.Data.Common.DbDataRecord,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
    </members>
</doc>
